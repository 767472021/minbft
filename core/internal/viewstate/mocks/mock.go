// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger-labs/minbft/core/internal/viewstate (interfaces: State)

// Package mock_viewstate is a generated GoMock package.
package mock_viewstate

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// FinishViewChange mocks base method
func (m *MockState) FinishViewChange(arg0 uint64) (bool, bool, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishViewChange", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(func())
	return ret0, ret1, ret2
}

// FinishViewChange indicates an expected call of FinishViewChange
func (mr *MockStateMockRecorder) FinishViewChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishViewChange", reflect.TypeOf((*MockState)(nil).FinishViewChange), arg0)
}

// HoldView mocks base method
func (m *MockState) HoldView() (uint64, uint64, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldView")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(func())
	return ret0, ret1, ret2
}

// HoldView indicates an expected call of HoldView
func (mr *MockStateMockRecorder) HoldView() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldView", reflect.TypeOf((*MockState)(nil).HoldView))
}

// StartViewChange mocks base method
func (m *MockState) StartViewChange(arg0 uint64) (bool, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartViewChange", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// StartViewChange indicates an expected call of StartViewChange
func (mr *MockStateMockRecorder) StartViewChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartViewChange", reflect.TypeOf((*MockState)(nil).StartViewChange), arg0)
}
