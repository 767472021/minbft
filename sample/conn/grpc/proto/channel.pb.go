// Code generated by protoc-gen-go. DO NOT EDIT.
// source: channel.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_4dc8e85b211f39c6, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "proto.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Channel_ChatClient, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Channel_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Channel_serviceDesc.Streams[0], "/proto.Channel/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelChatClient{stream}
	return x, nil
}

type Channel_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type channelChatClient struct {
	grpc.ClientStream
}

func (x *channelChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *channelChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChannelServer is the server API for Channel service.
type ChannelServer interface {
	Chat(Channel_ChatServer) error
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServer).Chat(&channelChatServer{stream})
}

type Channel_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type channelChatServer struct {
	grpc.ServerStream
}

func (x *channelChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *channelChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Channel_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "channel.proto",
}

func init() { proto.RegisterFile("channel.proto", fileDescriptor_channel_4dc8e85b211f39c6) }

var fileDescriptor_channel_4dc8e85b211f39c6 = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x48, 0xcc,
	0xcb, 0x4b, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xca, 0x5c,
	0xec, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0x05, 0x89, 0x95, 0x39,
	0xf9, 0x89, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0x91, 0x39, 0x17, 0xbb,
	0x33, 0x44, 0xb3, 0x90, 0x0e, 0x17, 0x8b, 0x73, 0x46, 0x62, 0x89, 0x10, 0x1f, 0xc4, 0x18, 0x3d,
	0xa8, 0x66, 0x29, 0x34, 0xbe, 0x12, 0x83, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0x58, 0xd0, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x0b, 0xe5, 0x99, 0x7c, 0x00, 0x00, 0x00,
}
